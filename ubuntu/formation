#!/bin/bash

# based on thoughtbot laptop script (https://github.com/thoughtbot/laptop)
# and on minimarkham's formation script (https://github.com/minamarkham/formation/blob/master/slay)

#!/usr/bin/env bash

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

set -Eeuo pipefail
trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m\033[0m  Formation failed  \e[31m\033[0m\n" >&2; exit $ret' EXIT

###############################################################################
# TWIRL: Check for required functions file
###############################################################################

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
if [ -e $script_dir/twirl ]; then
  cd "$(dirname "${BASH_SOURCE[0]}")" && . "twirl"
else
  printf "\n ⚠️  ./twirl not found  💃🏾 First, you need to twirl on your haters\n"
  exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################

check_bash_version

###############################################################################
# Get in Formation!          http://patorjk.com/software/taag/ ( font: Script )
###############################################################################

printf "
_
| |
| |  __   ,_    _  _  _    __, _|_ 🍋  __   _  _
|/  /  \_/  |  / |/ |/ |  /  |  |  |  /  \_/ |/ |
|__/\__/    |_/  |  |  |_/\_/|_/|_/|_/\__/   |  |
|\  ---------------------------------------------
|/  Cause you slay               [for Bash > 3.2]
╭───────────────────────────────────────────────────╮
│  Okay developers now let's get in ${bold}formation${normal}.      │
│───────────────────────────────────────────────────│
│  Safe to run multiple times on the same machine.  │
│  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   │
│  on what is already installed on the machine.     │
╰───────────────────────────────────────────────────╯
${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}
"

###############################################################################
# CHECK: Internet
###############################################################################
chapter "Checking internet connection…"
check_internet_connection

###############################################################################
# PROMPT: Password
###############################################################################
chapter "Caching password…"
ask_for_sudo

###############################################################################
# PROMPT: SSH Key
###############################################################################
chapter 'Checking for SSH key…'
ssh_key_setup

###############################################################################
# UPDATE: apt packages
###############################################################################
chapter 'Updating apt packages'
update_apt
upgrade_apt

###############################################################################
# INSTALL: Dependencies
###############################################################################
chapter "Installing Dependencies…"

# # -----------------------------------------------------------------------------
# # XCode
# # -----------------------------------------------------------------------------
# if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
# 	test -d "${xpath}" && test -x "${xpath}" ; then
# 	print_success_muted "Xcode already installed. Skipping."
# else
# 	step "Installing Xcode…"
# 	xcode-select --install
# 	print_success "Xcode installed!"
# fi

# if [ ! -d "$HOME/.bin/" ]; then
# 	mkdir "$HOME/.bin"
# fi

# -----------------------------------------------------------------------------
# INSTALL: apt packages
# -----------------------------------------------------------------------------
if [ -e $cwd/assets/apt ]; then
  chapter "Installing apt packages…"

  local package_list=()
  mapfile -t package_list < $cwd/assets/apt

  install_apt
fi

# # -----------------------------------------------------------------------------
# # Bash-it
# # -----------------------------------------------------------------------------
# if [ -d "$HOME/.bash_it" ]; then
# 	print_success_muted "Bash-it already installed. Skipping."
# else
# 	step "Installing Bash-it…"
# 	git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it
# 	~/.bash_it/install.sh --silent --no-modify-config
# 	print_success "Bash-it installed!"
# fi

# -----------------------------------------------------------------------------
# zsh
# -----------------------------------------------------------------------------

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

# -----------------------------------------------------------------------------
# Oh-My-Zsh
# -----------------------------------------------------------------------------

chapter "Installing Oh-My-Zsh and Starship…"
if [ -d "$HOME/.oh-my-zsh" ]; then
  print_success_muted "OMZ already installed. Skipping."
else
  step "Installing OMZ"
  # zsh installed by apt
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  # delete zshrc so that there's not a file conflict when symlinking later
  rm ~/.zshrc
  # 
  step "installing Starship"
  curl -fsSL https://starship.rs/install.sh | sudo bash -s -- -y
  print_success "OMZ and Starship installed"
fi

# -----------------------------------------------------------------------------
# asdf (version manager)
# -----------------------------------------------------------------------------
chapter "Installing asdf version manager…"
if ! [ -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf
  pushd ~/.asdf
  git checkout "$(git describe --abbrev=0 --tags)"
  popd
  print_success "asdf installed!"
else
  print_success_muted "asdf already installed"
fi

# -----------------------------------------------------------------------------
# asdf plugins (version manager)
# -----------------------------------------------------------------------------
source "$HOME/.asdf/asdf.sh"
add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

# -----------------------------------------------------------------------------
# Node
# -----------------------------------------------------------------------------
chapter "Installing Node…"
if ! [ -x "$(command -v node)" ]; then
  bash -c '${ASDF_DATA_DIR:=$HOME/.asdf}/plugins/nodejs/bin/import-release-team-keyring'
  install_asdf_language "nodejs" "14"
  nodev=$(node -v)
  print_success "Using Node $nodev!"
else
  print_success_muted "Node already installed. Skipping."
fi

# -----------------------------------------------------------------------------
# Ruby & Rails
# -----------------------------------------------------------------------------
chapter "Installing Ruby and Rails"
if ! [ -x "$(command -v ruby)" ]; then
  install_asdf_language "ruby" "2.7"
  gem update --system --silent --no-document
  rubyv=$(ruby --version)
  print_success "Using $rubyv"
else
  print_success_muted "Ruby already installed. Skipping."
fi

if ! [ -x "$(command -v rails)" ]; then
  step "Installing Rails"
  gem_install_or_update rails
else 
  print_success_muted "Ruby already installed. Skipping."
fi

# -----------------------------------------------------------------------------
# Rust
# -----------------------------------------------------------------------------
chapter "Installing Rust"
if ! [ -x "$(command -v rustup)" ]; then
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  print_success "Rust installed!"
  source $HOME/.cargo/env
  # does not need to be added to .zshrc since rust installer automatically adds itself to ~/.profile
  rustv=$(rustc --version)
  print_success "Using $rustv!"
else
  print_success_muted "Rustup already installed. Skipping."
fi


# # -----------------------------------------------------------------------------
# # Homebrew
# # -----------------------------------------------------------------------------
# if ! [ -x "$(command -v brew)" ]; then
# 	step "Installing Homebrew…"
# 	curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
# 	export PATH="/usr/local/bin:$PATH"
# 	print_success "Homebrew installed!"
# else
# 	print_success_muted "Homebrew already installed. Skipping."
# fi

# if brew list | grep -Fq brew-cask; then
# 	step "Uninstalling old Homebrew-Cask…"
# 	brew uninstall --force brew-cask
# 	print_success "Homebrew-Cask uninstalled!"
# fi

# ###############################################################################
# # INSTALL: brews
# ###############################################################################
# if [ -e $cwd/swag/brews ]; then
# 	chapter "Installing Homebrew formulae…"

# 	for brew in $(<$cwd/swag/brews); do
# 		install_brews $brew
# 	done
# fi

# ###############################################################################
# # UPDATE: Homebrew
# ###############################################################################
# chapter "Updating Homebrew formulae…"
# brew update

# ###############################################################################
# # INSTALL: casks
# ###############################################################################
# if [ -e $cwd/swag/casks ]; then
# 	chapter "Installing apps via Homebrew…"

# 	for cask in $(<$cwd/swag/casks); do
# 	    install_application_via_brew $cask
# 	done
# fi

# ###############################################################################
# # INSTALL: Mac App Store Apps
# ###############################################################################
# chapter "Installing apps from App Store…"
# if [ -x mas ]; then

# 	print_warning "Please install mas-cli first: brew mas. Skipping."

# 	else

# 	if [ -e $cwd/swag/apps ]; then
# 		if mas_setup; then
# 			# Workaround for associative array in Bash 3
# 			# https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
# 			for app in $(<$cwd/swag/apps); do
# 				KEY="${app%%::*}"
# 				VALUE="${app##*::}"
# 				install_application_via_app_store $KEY $VALUE
# 			done
# 		else
# 			print_warning "Please signin to App Store first. Skipping."
# 		fi
# 	fi

# fi

# ###############################################################################
# # CLEAN: Homebrew files
# ###############################################################################
# chapter "Cleaning up Homebrew files…"
# brew cleanup 2> /dev/null

###############################################################################
# INSTALL: npm packages
###############################################################################
if [ -e $cwd/assets/npm ]; then
  chapter "Installing npm packages…"

  for pkg in $(<$cwd/assets/npm); do
    KEY="${pkg%%::*}"
    VALUE="${pkg##*::}"
    install_npm_packages $KEY $VALUE
  done
fi


###############################################################################
# OPTIONAL: Customizations
###############################################################################
chapter "Adding mixins…"
if [ -f "$cwd/.mixins" ]; then
  if ask "Do you want to add mixins?" Y; then
    . "$cwd/.mixins"; printf "\n  Mixins added. 🔥 ${bold}Swag.${normal}\n";
  else
    print_success_muted "Mixins declined. Skipped.";
  fi
else
  print_warning "No $cwd/.mixins found. Skipping."
fi

###############################################################################
# 🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋
###############################################################################
e_lemon_ated
