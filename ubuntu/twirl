#!/bin/bash

# Get full directory name of this script
cwd=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

source "$cwd/src/text_format.sh" &&
  source "$cwd/src/utils.sh" &&
  source "$cwd/src/prompts.sh" &&
  source "$cwd/src/ssh_setup.sh"

###############################################################################
# Misc
###############################################################################

# return 1 if global command line program installed, else 0
cli_is_installed() {
  # set to 1 initially
  local return_=1
  # set to 0 if not found
  type "$1" &>/dev/null || { local return_=0; }
  # return value
  echo "$return_"
}

# mas_setup() {
#     if mas account > /dev/null; then
#         return 0
#     else
#         return 1
#     fi
# }

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@" --no-document
  else
    gem install "$@" --no-document
  fi
}

update_apt() {
  sudo apt-get update -yqq > /dev/null
  print_success "apt sources updated"
}

upgrade_apt() {
  sudo apt-get upgrade -yqq > /dev/null
  print_success "apt upgrade successful\n"
}

install_apt_list() {
  # installs a list of apt packages
  # uses package_list array
  local install_list=()
  for pkg in "$@"; do
    if dpkg -s "$pkg" &> /dev/null; then
      print_success_muted "$pkg already installed. Skipping."
    else
      # not yet installed, add to list
      install_list+=("$pkg")
    fi
  done

  printf "\n"
  if [[ ${#install_list[@]} -eq 0 ]]; then
    print_success_muted "No new packages to install."
  else
    echo_install "Installing " "${install_list[@]}" "\n"
    sudo apt-get install -yqq "${install_list[@]}" > /dev/null
    print_in_green "${bold}✓ installed!${normal}\n"
  fi
}

# install_brews() {
#     if test ! $(brew list | grep $brew); then
#         echo_install "Installing $brew"
# 		brew install $brew >/dev/null
# 		print_in_green "${bold}✓ installed!${normal}\n"
# 	else
# 		print_success_muted "$brew already installed. Skipped."
#     fi
# }

# install_application_via_brew() {
#     if [[ ! $(brew cask list | grep $cask) ]]; then
#         echo_install "Installing $cask"
#         brew cask install $cask --appdir=/Applications >/dev/null
#         print_in_green "${bold}✓ installed!${normal}\n"
#     else
#     	print_success_muted "$cask already installed. Skipped."
#     fi
# }

# install_application_via_app_store() {
# 	if ! mas list | grep $1 &> /dev/null; then
# 		echo_install "Installing $2"
# 		mas install $1 >/dev/null
# 		print_in_green "${bold}✓ installed!${normal}\n"
# 	else
# 		print_success_muted "$2 already installed. Skipped."
# 	fi
# }

install_npm_packages() {
  # $2 = cli name (such as ncu); $1 = npm package (such as npm-check-updates)
  if [[ $(cli_is_installed "$2") == 0 ]]; then
    echo_install "Installing $1"
    npm install "$1" -g --silent
    print_in_green "${bold}✓ installed!${normal}\n"
  else
    print_success_muted "$1 already installed. Skipped."
  fi
}

# install a package from a url
install_update_dpkg() {
  local temp_dir
  temp_dir=$(mktemp -d --tmpdir) || exit 1
  local filename=${1##*/}
  wget -P "$temp_dir" "$1" --quiet
  sudo dpkg -i "$temp_dir/$filename"
  rm -rf "$temp_dir"
}

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  print_in_green "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells &> /dev/null ; then
    print_in_green "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name" &> /dev/null
  fi
}

install_asdf_language() {
  local language="$1"
  # install latest specified version, or the latest stable version otherwise
  local version

  if [[ -z "$2" ]]; then
    # no version specified; go with latest available
    version=$(asdf latest "$language")
  else
    # version specified, install that version
    version=$(asdf list all "$language" "$2" | grep -v "[a-z]" | tail -1)
  fi

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}